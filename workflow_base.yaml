name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install awscli -y

    - name: Configure AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region eu-north-1

    - name: Create ECR Repository if not exists
      run: |
        REPO_NAME="new-repo-name"
        aws ecr describe-repositories --repository-names "$REPO_NAME" || aws ecr create-repository --repository-name "$REPO_NAME"
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    - name: Authenticate Docker to AWS ECR
      run: |
        aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.eu-north-1.amazonaws.com/${{ secrets.ECR_REPOSITORY }}

    - name: Build and push Docker image
      id: build-image
      run: |
        IMAGE_TAG=${GITHUB_SHA}
        IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.eu-north-1.amazonaws.com/new-repo-name
        docker build -t $IMAGE_URI:${IMAGE_TAG} .
        docker push $IMAGE_URI:${IMAGE_TAG}
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup SSH Key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem

    - name: Deploy to EC2
      run: |
        IMAGE_TAG=${GITHUB_SHA}
        IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.eu-north-1.amazonaws.com/new-repo-name
        ssh -o StrictHostKeyChecking=no -i "ec2_key.pem" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          docker pull $IMAGE_URI:${IMAGE_TAG}
          docker stop new_app_container || true
          docker rm new_app_container || true
          docker run -d -p 8001:8001 --name new_app_container $IMAGE_URI:${IMAGE_TAG}
        EOF

      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: eu-north-1
        IMAGE_TAG: ${{ github.sha }}
